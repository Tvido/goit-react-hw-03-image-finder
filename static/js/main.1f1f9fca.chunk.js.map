{"version":3,"sources":["services/image-api.js","components/Button/Button.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/Searchbar/SearchBar.js","App.js","index.js"],"names":["fetchImages","searchQuery","currentPage","pageSize","axios","get","ButtonTmp","children","onClick","allyProps","className","type","ImageGalleryItem","id","webformatURL","src","alt","ImageGallery","images","onOpenLargeImages","map","largeImageURL","modalRoot","document","querySelector","Modal","handleKeyDown","event","code","props","onClose","handleOverlayClick","currentTarget","target","window","addEventListener","this","removeEventListener","largeImg","createPortal","Component","SearchBar","state","query","handleChange","setState","value","handleSubmit","preventDefault","onSubmit","reset","autoComplete","autoFocus","placeholder","onChange","App","isLoading","error","showModal","imageStatus","toggleModal","onImageClick","url","onImageLoaded","onOpenlargeImages","console","log","onSearchQuery","options","imageApi","then","response","prevState","data","hits","catch","finally","scrollTo","top","documentElement","scrollHeight","behavior","prevProps","shouldRenderLoadMoreBtn","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f1f9fca.chunk.js","sourcesContent":["// import { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = '21227182-bce953b8699f3d441be82715f';\r\nconst BASE_URL = 'https://pixabay.com/api';\r\n\r\nconst fetchImages = ({ searchQuery = '', currentPage = 1, pageSize = 12 }) => {\r\n  return axios.get(\r\n    `${BASE_URL}/?image_type=photo&orientation=horizontal&q=${searchQuery}&page=${currentPage}&per_page=${pageSize}&key=${API_KEY}`,\r\n  );\r\n};\r\n\r\nexport default fetchImages;\r\n","import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nconst ButtonTmp = ({ children, onClick, ...allyProps }) => (\r\n  <div className=\"ButtonTmp\">\r\n    <button type=\"button\" className=\"Button\" onClick={onClick} {...allyProps}>\r\n      {children}\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default ButtonTmp;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ImageGalleryItem.css';\r\n\r\nconst ImageGalleryItem = ({ id, webformatURL, onClick }) => (\r\n  <li className=\"ImageGalleryItem\" key={id} onClick={onClick}>\r\n    <img src={webformatURL} alt=\"\" className=\"ImageGalleryItemImage\" />\r\n  </li>\r\n);\r\n\r\nImageGalleryItem.propTypes = {\r\n  webformatURL: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\n\r\nimport './ImageGallery.css';\r\n\r\nconst ImageGallery = ({ images, onOpenLargeImages }) => (\r\n  <>\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(({ id, webformatURL, largeImageURL, onClick }) => (\r\n        <ImageGalleryItem\r\n          key={id}\r\n          webformatURL={webformatURL}\r\n          onClick={() => onOpenLargeImages(largeImageURL)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  </>\r\n);\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport './Modal.css';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  handleOverlayClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { largeImg, alt } = this.props;\r\n\r\n    return createPortal(\r\n      <>\r\n        <div className=\"Overlay\" onClick={this.handleOverlayClick}>\r\n          <div className=\"Modal\">\r\n            <img src={largeImg} alt={alt} />\r\n          </div>\r\n        </div>\r\n      </>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass SearchBar extends Component {\r\n  static propTypes = {\r\n    inputValue: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    query: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ query: event.currentTarget.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    // if (this.state.inputValue.trim() === '') {\r\n    //   return;\r\n    // }\r\n    this.props.onSubmit(this.state.query);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ query: '' });\r\n  };\r\n\r\n  render() {\r\n    const { query } = this.state;\r\n\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form onSubmit={this.handleSubmit} className=\"SearchForm\">\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            value={query}\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport imageApi from './services/image-api';\r\n\r\nimport Button from './components/Button';\r\nimport ImageGallery from './components/ImageGallery';\r\nimport Modal from './components/Modal';\r\nimport SearchBar from './components/Searchbar';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  static propTypes = {\r\n    images: PropTypes.arrayOf(PropTypes.object),\r\n    currentPage: PropTypes.number,\r\n    searchQuery: PropTypes.string,\r\n    isLoading: PropTypes.bool,\r\n    error: PropTypes.object,\r\n    showModal: PropTypes.bool,\r\n    largeImageUrl: PropTypes.string,\r\n    imageStatus: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    images: [],\r\n    currentPage: 1,\r\n    searchQuery: '',\r\n    isLoading: false,\r\n    error: null,\r\n    showModal: false,\r\n    largeImg: '',\r\n    imageStatus: 'loading',\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState(({ showModal }) => ({\r\n      showModal: !showModal,\r\n    }));\r\n    this.setState({ largeImg: '' });\r\n  };\r\n\r\n  onImageClick = url => {\r\n    this.setState({ largeImageURL: url });\r\n    this.toggleModal();\r\n    this.setState({ imageStatus: 'loading' });\r\n  };\r\n\r\n  onImageLoaded = () => {\r\n    this.setState({ imageStatus: 'loaded' });\r\n  };\r\n\r\n  onOpenlargeImages = largeImageURL => {\r\n    console.log(largeImageURL);\r\n    this.setState({\r\n      largeImg: largeImageURL,\r\n      showModal: true,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.searchQuery !== this.state.searchQuery) {\r\n      this.fetchImages();\r\n    }\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  }\r\n\r\n  onSearchQuery = query => {\r\n    this.setState({\r\n      searchQuery: query,\r\n      currentPage: 1,\r\n      images: [],\r\n      error: null,\r\n    });\r\n  };\r\n\r\n  fetchImages = () => {\r\n    const { currentPage, searchQuery } = this.state;\r\n    const options = {\r\n      searchQuery,\r\n      currentPage,\r\n    };\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    imageApi(options)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          images: [...prevState.images, ...response.data.hits],\r\n          currentPage: prevState.currentPage + 1,\r\n        }));\r\n      })\r\n      .catch(error => this.setState({ error }))\r\n      .finally(() => {\r\n        if (this.state.currentPage > 2) {\r\n          window.scrollTo({\r\n            top: document.documentElement.scrollHeight,\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n        return this.setState({ isLoading: false });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { images, showModal, isLoading, error, largeImg } = this.state;\r\n    const shouldRenderLoadMoreBtn = images.length > 0 && !isLoading;\r\n\r\n    return (\r\n      <>\r\n        <SearchBar onSubmit={this.onSearchQuery} />\r\n\r\n        {isLoading && <h1>Loading...</h1>}\r\n\r\n        {error && <h1>Something went wrong! Please, try again later</h1>}\r\n\r\n        <ImageGallery\r\n          images={images}\r\n          onOpenLargeImages={this.onOpenLargeImages}\r\n        />\r\n\r\n        {shouldRenderLoadMoreBtn && (\r\n          <Button type=\"button\" onClick={this.fetchImages}>\r\n            Load more\r\n          </Button>\r\n        )}\r\n\r\n        {showModal && <Modal onClose={this.toggleModal} largeImg={largeImg} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}